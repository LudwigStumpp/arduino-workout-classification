/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 06.09.2021 18:22:40

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 416;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(8) float tensor_data1[20] = { -0.053205262869596481, 0.0013353171525523067, 0.14424483478069305, 0.088372483849525452, 0.11226613819599152, -0.032081190496683121, 0.085309453308582306, 0, -0.0023363179061561823, -0.059690747410058975, -0.0070063276216387749, -0.04622587189078331, -0.049877014011144638, 0.052861835807561874, 0.038342434912919998, 0.080979257822036743, -0.057148933410644531, 0.043648462742567062, -0.010697833262383938, -0.022497961297631264, };
const TfArray<1, int> tensor_dimension1 = { 1, { 20 } };
const ALIGN(8) float tensor_data2[10] = { 0.10016132146120071, 0, 0.054103530943393707, 0.055830888450145721, -0.014195041730999947, 0.019918026402592659, -0.046158052980899811, -0.031739108264446259, -0.0025389264337718487, -0.019675068557262421, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(8) float tensor_data3[3] = { -0.004127665888518095, -0.01524526160210371, 0.022593330591917038, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(8) float tensor_data4[20*33] = { 
  -0.23849765956401825, -0.29312214255332947, -0.1850690096616745, -0.014959590509533882, -0.064177587628364563, 0.0063349376432597637, -0.28711390495300293, -0.21406108140945435, -0.20460863411426544, 0.083008073270320892, 0.33713790774345398, -0.1386057585477829, -0.27992346882820129, 0.31804406642913818, 0.076141171157360077, 0.2596341073513031, 0.23541601002216339, -0.16713288426399231, 0.28731673955917358, -0.13700978457927704, 0.34229397773742676, -0.29722645878791809, 0.35004517436027527, -0.29592651128768921, -0.15452735126018524, -0.2374158650636673, -0.26843041181564331, 0.10050045698881149, -0.14170131087303162, -0.058310039341449738, -0.14385466277599335, -0.22635538876056671, 0.087996982038021088, 
  0.027131883427500725, 0.059397920966148376, -0.014505153521895409, -0.10563872754573822, 0.052853912115097046, 0.30957558751106262, 0.19116917252540588, 0.26770681142807007, -0.28616061806678772, 0.19558495283126831, 0.16147454082965851, -0.17374055087566376, -0.080788120627403259, -0.29258882999420166, -0.20825032889842987, -0.15614461898803711, -0.13864707946777344, -0.30059227347373962, 0.2495872974395752, 0.12442128360271454, -0.041311241686344147, -0.20417313277721405, -0.27074095606803894, -0.20243003964424133, 0.10032854974269867, -0.1831786036491394, 0.074728623032569885, 0.1560603529214859, -0.18912091851234436, 0.020041374489665031, 0.25814348459243774, 0.28545317053794861, -0.34203183650970459, 
  0.034877553582191467, -0.18395251035690308, -0.22641745209693909, 0.27933540940284729, 0.069217190146446228, 0.19574594497680664, -0.23809243738651276, -0.047565676271915436, -0.26591596007347107, -0.0065345112234354019, -0.14399240911006927, -0.04012492299079895, -0.10961748659610748, -0.025324895977973938, 0.28744354844093323, -0.15999171137809753, -0.097454279661178589, 0.046567939221858978, 0.23671445250511169, -0.39378473162651062, 0.17963200807571411, -0.1040332242846489, -0.1050015389919281, 0.2011125236749649, -0.08246670663356781, 0.40851229429244995, 0.11121669411659241, -0.039403006434440613, 0.022118182852864265, -0.21848100423812866, -0.25479346513748169, 0.17528067529201508, -0.33400055766105652, 
  -0.34284257888793945, 0.0080228922888636589, -0.28249263763427734, 0.2152802050113678, 0.087180770933628082, 0.17481960356235504, -0.24010540544986725, -0.041699457913637161, -0.061545252799987793, 0.18582271039485931, -0.083494938910007477, -0.31333449482917786, 0.14100070297718048, 0.12812040746212006, 0.096122860908508301, -0.13614879548549652, 0.0072981189005076885, -0.01583261601626873, 0.20883136987686157, 0.076300419867038727, -0.43874499201774597, -0.30626052618026733, 0.30187764763832092, 0.060804244130849838, -0.074955955147743225, 0.3909352719783783, -0.0070390962064266205, -0.067998483777046204, 0.24269463121891022, -0.038876138627529144, -0.10331112146377563, 0.1350071132183075, -0.039685629308223724, 
  -0.015433751977980137, 0.2651563286781311, -0.21872018277645111, 0.31058228015899658, 0.11707659810781479, 0.4032534658908844, -0.23983973264694214, -0.027445292100310326, 0.011508354917168617, 0.022558949887752533, 0.031339779496192932, 0.029994988813996315, 0.048927385360002518, -0.044533845037221909, -0.17900802195072174, 0.074895896017551422, -0.036723662167787552, -0.092541627585887909, 0.068146340548992157, -0.01227105874568224, -0.018751407042145729, -0.19775857031345367, -0.061037454754114151, 0.1456030011177063, 0.033938255161046982, -0.034100443124771118, 0.36588701605796814, 0.21684917807579041, 0.3825589120388031, 0.045312445610761642, 0.013835919089615345, -0.2540745735168457, -0.21981127560138702, 
  0.14232559502124786, -0.22040215134620667, -0.086507454514503479, -0.084091484546661377, -0.036607082933187485, 0.090665750205516815, 0.052497662603855133, 0.09937247633934021, -0.016355443745851517, -0.29774948954582214, -0.18328587710857391, -0.23517274856567383, 0.27347952127456665, -0.1874663233757019, 0.21151560544967651, 0.03274993970990181, -0.18148165941238403, 0.10844647139310837, 0.19756320118904114, 0.26157680153846741, -0.18633659183979034, -0.32986864447593689, -0.092422373592853546, -0.1394585520029068, -0.25244677066802979, 0.11831183731555939, 0.027646485716104507, -0.16011221706867218, 0.15832617878913879, 0.091616600751876831, 0.12541793286800385, 0.29926320910453796, -0.01842854917049408, 
  -0.22481170296669006, 0.35263296961784363, -0.018524399027228355, -0.029124952852725983, -0.073073782026767731, 0.14242221415042877, 0.13608555495738983, 0.00050401524640619755, -0.12386085838079453, 0.038894012570381165, -0.36512717604637146, -0.18003654479980469, -0.28112891316413879, -0.16376274824142456, 0.36788421869277954, 0.16891433298587799, 0.00043246903805993497, 0.21914640069007874, 0.1621231734752655, -0.090085521340370178, -0.081584654748439789, -0.14134711027145386, 0.389894038438797, -0.20237909257411957, 0.1679832935333252, 0.080098941922187805, -0.077788121998310089, 0.14129744470119476, 0.16754867136478424, -0.0098966276273131371, 0.21956206858158112, -0.17807048559188843, -0.23963235318660736, 
  -0.11061909794807434, 0.32367536425590515, -0.22446572780609131, -0.077373087406158447, -0.27365455031394958, 0.3066079318523407, 0.048475772142410278, -0.30905058979988098, 0.26549717783927917, -0.25921630859375, 0.2093949019908905, -0.17951487004756927, -0.23982013761997223, -0.14562815427780151, -0.18434189260005951, -0.034447759389877319, -0.0062663257122039795, -0.26253122091293335, 0.019424885511398315, -0.093843594193458557, -0.10313120484352112, -0.26380893588066101, -0.31980669498443604, -0.065942674875259399, -0.052843064069747925, -0.28885704278945923, 0.23124811053276062, 0.1017414927482605, 0.12115040421485901, 0.23151704668998718, -0.29385244846343994, 0.27848431468009949, -0.29307007789611816, 
  0.18572680652141571, 0.20321017503738403, 0.20629400014877319, -0.307750403881073, 0.29195922613143921, 0.18396754562854767, -0.025506393983960152, -0.055939063429832458, 0.21063549816608429, -0.18028911948204041, -0.25577419996261597, 0.40809318423271179, 0.094265647232532501, -0.03753301128745079, -0.27884611487388611, -0.12971971929073334, 0.066955737769603729, 0.013890921138226986, 0.25661450624465942, 0.094409093260765076, 0.042117651551961899, -0.0092884879559278488, 0.022821731865406036, -0.10603004693984985, -0.063279710710048676, 0.29776310920715332, -0.20885288715362549, 0.14287638664245605, 0.35376331210136414, -0.0017539305845275521, -0.07232319563627243, 0.21236552298069, -0.061736207455396652, 
  0.023328540846705437, 0.10156036168336868, 0.070089258253574371, 0.10383681207895279, -0.24981951713562012, -0.0047805048525333405, 0.0097737284377217293, -0.20885168015956879, 0.20060433447360992, -0.010513381101191044, 0.052790079265832901, -0.075011566281318665, -0.12248523533344269, 0.016379402950406075, 0.027309028431773186, -0.1189836859703064, 0.052685827016830444, 0.32714554667472839, 0.20322903990745544, -0.22936679422855377, 0.25663280487060547, -0.16646988689899445, -0.059420574456453323, 0.31665149331092834, 0.21128667891025543, -0.28546538949012756, -0.14050036668777466, -0.23524780571460724, 0.27752226591110229, 0.11102850735187531, -0.33736884593963623, 0.14254824817180634, 0.026748759672045708, 
  -0.20565193891525269, -0.26915663480758667, -0.26153838634490967, -0.25733089447021484, 0.38290658593177795, -0.069790981709957123, 0.1905638575553894, 0.045375611633062363, 0.11838613450527191, 0.36479207873344421, 0.14627814292907715, 0.35437461733818054, 0.069294668734073639, 0.35080647468566895, -0.016105480492115021, -0.20286567509174347, -0.25968807935714722, 0.23324181139469147, -0.020149355754256248, 0.037897594273090363, -0.054721139371395111, 0.13844685256481171, 0.27286386489868164, -0.29322549700737, -0.083460487425327301, 0.12390001118183136, -0.18366588652133942, 0.18181361258029938, 0.14973448216915131, -0.19593000411987305, 0.38940200209617615, 0.039001505821943283, -0.20702923834323883, 
  0.25234639644622803, 0.14985564351081848, -0.03956807404756546, -0.099771082401275635, 0.012350429780781269, 0.28588351607322693, 0.063359864056110382, 0.21682232618331909, 0.24028019607067108, 0.2867540717124939, -0.094712249934673309, 0.2579614520072937, 0.0118132084608078, -0.2415948212146759, -0.23139448463916779, 0.1188139021396637, 0.0098428204655647278, 0.16590993106365204, 0.27540209889411926, 0.24171552062034607, 0.14734198153018951, -0.14776106178760529, -0.028912218287587166, 0.047403350472450256, 0.2158484011888504, -0.2745915949344635, -0.089522764086723328, 0.23943191766738892, -0.23195743560791016, 0.20724841952323914, -0.27650681138038635, 0.11438392847776413, -0.23721873760223389, 
  0.070932216942310333, 0.17343617975711823, 0.0023431624285876751, -0.24346256256103516, 0.20268739759922028, -0.15438708662986755, 0.03862917423248291, -0.19073611497879028, -0.095023170113563538, 0.25376781821250916, -0.074213013052940369, -0.21631360054016113, -0.29307794570922852, 0.22218714654445648, 0.24003227055072784, -0.37302127480506897, 0.12802349030971527, -0.070814825594425201, -0.26518961787223816, -0.11494970321655273, -0.36197283864021301, -0.11941913515329361, 0.2438947856426239, -0.1094355583190918, -0.33116832375526428, -0.085246451199054718, -0.29647526144981384, 0.060258802026510239, 0.20609374344348907, -0.12113235145807266, 0.18520534038543701, -0.16464999318122864, -0.15907846391201019, 
  0.0047674034722149372, 0.059762943536043167, -0.12821616232395172, 0.28030231595039368, 0.010893801227211952, -0.091234520077705383, 0.12904614210128784, -0.067018657922744751, 0.067995615303516388, 0.21338367462158203, 0.29369005560874939, 0.26266101002693176, 0.14109419286251068, -0.1633123904466629, 0.022522024810314178, 0.048628944903612137, -0.19513013958930969, -0.20380184054374695, 0.086454927921295166, 0.22517357766628265, -0.35651636123657227, -0.15588630735874176, 0.1228906661272049, -0.15173038840293884, -0.34059625864028931, 0.28429701924324036, 0.17365984618663788, 0.10155744105577469, 0.27999630570411682, -0.13758592307567596, -0.3827681839466095, 0.3051944375038147, 0.068887978792190552, 
  -0.1548159271478653, -0.31483936309814453, 0.37201699614524841, -0.11945076286792755, 0.20914672315120697, -0.065544210374355316, 0.21184876561164856, 0.28899157047271729, 0.10080734640359879, -0.11585268378257751, -0.2730633020401001, 0.020788425579667091, -0.25646114349365234, -0.0098991291597485542, 0.082572303712368011, 0.0046295151114463806, -0.11965859681367874, -0.10949449986219406, -0.013446260243654251, -0.098854213953018188, 0.062382187694311142, 0.13169914484024048, -0.10550525784492493, 0.13692000508308411, 0.27535054087638855, 0.047196470201015472, -0.16291926801204681, 0.0099924933165311813, -0.070075519382953644, 0.12309605628252029, 0.16817924380302429, 0.025391068309545517, 0.25327304005622864, 
  -0.18841558694839478, 0.32471016049385071, -0.086751140654087067, 0.21247276663780212, -0.046506367623806, 0.31012490391731262, -0.16367305815219879, -0.040356140583753586, 0.0010034949518740177, 0.2431572824716568, -0.21464943885803223, 0.21252427995204926, -0.12463691830635071, -0.034155417233705521, 0.38554316759109497, -0.20501299202442169, 0.042868480086326599, 0.24796631932258606, 0.32901880145072937, 0.3040783703327179, 0.048902180045843124, -0.16405515372753143, 0.17745864391326904, -0.25888130068778992, -0.052414499223232269, -0.034425131976604462, 0.28893342614173889, 0.2290244996547699, 0.11274717003107071, 0.15799801051616669, -0.1724858433008194, -0.26767542958259583, -0.28473684191703796, 
  -0.1903800368309021, 0.33039870858192444, 0.25777766108512878, -0.0015342434635385871, 0.041254457086324692, -0.04851941391825676, 0.012610183097422123, -0.23259860277175903, -0.011569859459996223, 0.16888216137886047, 0.088048577308654785, -0.22732268273830414, -0.14742280542850494, -0.27055862545967102, -0.23950634896755219, 0.20192310214042664, 0.16738028824329376, 0.20345649123191833, -0.34426558017730713, -0.0031649777665734291, -0.074663706123828888, -0.23911237716674805, -0.21347145736217499, 0.29576200246810913, 0.14233680069446564, 0.067284964025020599, -0.11690127104520798, 0.017992883920669556, 0.32643896341323853, 0.23490802943706512, -0.063629306852817535, 0.013573207892477512, 0.037939142435789108, 
  -0.13331304490566254, 0.061736799776554108, -0.29985329508781433, -0.24149145185947418, 0.30247250199317932, -0.13899512588977814, 0.051350899040699005, 0.24559585750102997, -0.18980930745601654, 0.021449487656354904, 0.030318336561322212, 0.13567976653575897, 0.11374316364526749, -0.10797037184238434, -0.020624013617634773, -0.078226685523986816, 0.040762387216091156, -0.038719478994607925, -0.20409928262233734, 0.22371627390384674, -0.32751110196113586, -0.10237348079681396, 0.18911184370517731, -0.22715875506401062, 0.29650035500526428, -0.0065258503891527653, -0.22961395978927612, 0.36099615693092346, 0.21895018219947815, 0.16336517035961151, 0.1726987212896347, 0.041877452284097672, 0.05491962656378746, 
  -0.14249281585216522, 0.00096934475004673004, 0.34910950064659119, 0.26561671495437622, 0.27811735868453979, 0.15442351996898651, 0.070212110877037048, -0.23292525112628937, -0.023945719003677368, 0.0036190114915370941, -0.20182755589485168, -0.14646041393280029, 0.31715101003646851, 0.042889896780252457, -0.098881229758262634, 0.30079042911529541, -0.085555180907249451, 0.018503362312912941, -0.34187135100364685, 0.012272441759705544, 0.29886108636856079, -0.19780318439006805, -0.052946198731660843, 0.39790499210357666, -0.17156580090522766, -0.26874303817749023, 0.28779271245002747, -0.085469193756580353, 0.12257212400436401, -0.10681923478841782, 0.19079990684986115, 0.2167755663394928, 0.35763910412788391, 
  -0.15985409915447235, 0.10298521816730499, 0.16550996899604797, 0.13354557752609253, 0.0072179683484137058, -0.051141697913408279, -0.05318688228726387, -0.36920294165611267, 0.23413179814815521, 0.24342750012874603, -0.13371939957141876, 0.18583941459655762, -0.072123236954212189, -0.16534014046192169, 0.22203847765922546, 0.045116756111383438, 0.046951502561569214, -0.36807432770729065, -0.0012258843053132296, -0.12051542103290558, -0.15538905560970306, 0.12963007390499115, 0.21281179785728455, -0.34334710240364075, 0.15026611089706421, 0.28894242644309998, -0.083417370915412903, 0.25431925058364868, -0.36779150366783142, -0.41954785585403442, -0.40579336881637573, -0.30221232771873474, 0.27342668175697327, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(8) float tensor_data5[10*20] = { 
  -0.24813468754291534, 0.025172557681798935, 0.28156217932701111, 0.18600186705589294, 0.48730018734931946, -0.23246799409389496, 0.00056546472478657961, 0.075009346008300781, -0.30790218710899353, -0.41579246520996094, -0.25225836038589478, -0.25424173474311829, 0.37774881720542908, 0.4276861846446991, -0.17165325582027435, 0.11012806743383408, -0.34658700227737427, 0.034255821257829666, -0.066533893346786499, 0.10100501775741577, 
  -0.28059786558151245, 0.062615931034088135, -0.2165655642747879, 0.1667969822883606, 0.10580015182495117, 0.03812822699546814, 0.3000338077545166, -0.18902638554573059, -0.15555453300476074, -0.3112604022026062, 0.068653404712677002, -0.33239167928695679, -0.1014312207698822, -0.13121494650840759, -0.33105406165122986, -0.3712192177772522, -0.17653581500053406, 0.2822265625, 0.20760005712509155, -0.36843103170394897, 
  -0.26916316151618958, 0.35648226737976074, 0.17225566506385803, -0.13754749298095703, 0.43025663495063782, 0.0025777022819966078, 0.3257007896900177, -0.18976423144340515, 0.3130263090133667, 0.29947933554649353, -0.25842380523681641, -0.20721489191055298, 0.10121019929647446, -0.29887539148330688, 0.15939776599407196, -0.014548775739967823, -0.047607704997062683, 0.48910194635391235, -0.4582560658454895, -0.13553445041179657, 
  -0.21697549521923065, -0.10036783665418625, -0.374991774559021, -0.39365717768669128, -0.075813889503479004, 0.15238595008850098, 0.27225351333618164, 0.32460159063339233, 0.46693676710128784, -0.22234316170215607, 0.46367248892784119, 0.25077217817306519, 0.059915490448474884, -0.2977307140827179, 0.029349977150559425, 0.48195761442184448, 0.15607370436191559, 0.23943321406841278, 0.19426211714744568, -0.22855012118816376, 
  0.044821757823228836, 0.02722698450088501, -0.23383873701095581, -0.33507031202316284, -0.43629768490791321, 0.36230090260505676, -0.14906083047389984, -0.025713235139846802, -0.27845695614814758, 0.40914475917816162, 0.0084267621859908104, -0.44229713082313538, -0.39089646935462952, 0.13848154246807098, -0.077867284417152405, 0.061982475221157074, 0.07215002179145813, -0.3916814923286438, 0.43002557754516602, 0.085280299186706543, 
  0.35951998829841614, 0.34419092535972595, -0.4871450662612915, 0.078836329281330109, -0.2570749819278717, -0.11965669691562653, 0.073368236422538757, -0.09672313928604126, 0.32958611845970154, -0.34647712111473083, -0.3089672327041626, 0.46045419573783875, -0.39326825737953186, 0.09757436066865921, -0.10430695861577988, 0.40140652656555176, -0.33046811819076538, 0.046871520578861237, -0.53845387697219849, 0.30464473366737366, 
  0.26521009206771851, -0.15114529430866241, -0.078239649534225464, 0.25299209356307983, 0.13730433583259583, -0.13719342648983002, -0.098589859902858734, 0.19964635372161865, 0.25161689519882202, 0.33826401829719543, -0.28726744651794434, 0.25197139382362366, -0.37739270925521851, -0.00077010842505842447, -0.046003416180610657, -0.12720884382724762, 0.13854794204235077, -0.15554454922676086, 0.25293216109275818, -0.19192731380462646, 
  -0.29031950235366821, 0.36985781788825989, -0.16767106950283051, -0.45913490653038025, -0.15794198215007782, -0.071689456701278687, -0.23604601621627808, -0.347726970911026, 0.48983639478683472, 0.24740859866142273, 0.23081183433532715, 0.37100079655647278, -0.025972394272685051, 0.0089239040389657021, -0.15776209533214569, -0.2201894223690033, -0.28112882375717163, 0.014582287520170212, -0.049523103982210159, 0.18315757811069489, 
  -0.2192009836435318, 0.2677416205406189, 0.17661099135875702, 0.28546911478042603, 0.5203239917755127, 0.013301975093781948, 0.3712659478187561, -0.4124426543712616, -0.16156858205795288, -0.3667774498462677, 0.10184164345264435, 0.27391067147254944, 0.34360086917877197, 0.42347455024719238, -0.15995998680591583, 0.28796151280403137, -0.36064764857292175, 0.42500314116477966, -0.09237033873796463, -0.019730439409613609, 
  -0.21044732630252838, 0.13105341792106628, 0.22991657257080078, 0.30342355370521545, -0.33482196927070618, 0.28284615278244019, 0.26397615671157837, -0.23711861670017242, 0.3162098228931427, -0.20065875351428986, -0.20689988136291504, 0.085891030728816986, -0.3756348192691803, -0.07718147337436676, -0.45545804500579834, 0.04656369611620903, 0.38853445649147034, 0.33133077621459961, -0.074030682444572449, 0.38158577680587769, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(8) float tensor_data6[3*10] = { 
  -0.27202782034873962, -0.60320192575454712, -0.76315504312515259, 0.66735541820526123, 0.2690100371837616, 0.012083711102604866, 0.24730272591114044, 0.25831872224807739, -0.48582002520561218, -0.063520833849906921, 
  0.51476889848709106, -0.059357285499572754, 0.4006689190864563, -0.61709147691726685, 0.34694904088973999, -0.040301166474819183, -0.071150131523609161, 0.21811923384666443, 0.42724338173866272, 0.044760819524526596, 
  -0.83749330043792725, -0.062965273857116699, 0.20581904053688049, 0.36314851045608521, 0.39109113812446594, 0.20377463102340698, -0.11918225884437561, -0.071553923189640045, 0.18891988694667816, -0.28787249326705933, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 80, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 12, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 120, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 12, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
